(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{546:function(a,e,t){"use strict";t.r(e);var s=t(5),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jdk源码-aqs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk源码-aqs"}},[a._v("#")]),a._v(" JDK源码-AQS")]),a._v(" "),t("h2",{attrs:{id:"_1-整体架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-整体架构"}},[a._v("#")]),a._v(" 1. 整体架构")]),a._v(" "),t("p",[a._v("AQS作为JDK实现并发处理的核心类，提供了线程并发控制所需要的一些基础能力，比如公平锁，互斥锁等。")]),a._v(" "),t("p",[a._v("AQS内部维护一个双向链表(CLH Queue)，内部存储Node实例，Node实例存储了线程/ConditionQueue的状态，当获取锁/释放锁等操作发生时，通过CAS操作遍历此链表来提高效率。")]),a._v(" "),t("h2",{attrs:{id:"_2-node类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-node类"}},[a._v("#")]),a._v(" 2. Node类")]),a._v(" "),t("p",[a._v("Node存储了一个线程或者ConditionQueue，"),t("code",[a._v("thread")]),a._v("属性存储了关联的线程，通过"),t("code",[a._v("pre")]),a._v("和"),t("code",[a._v("prev")]),a._v("属性来指向当前队列的前后Node。")]),a._v(" "),t("p",[a._v("对于ConditionQueue的情况，节点头部为一个静态实例Node,内部通过"),t("code",[a._v("nextWaiter")]),a._v("属性来链接一个单链表")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Node")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** Marker to indicate a node is waiting in shared mode */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Node")]),a._v(" SHARED "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h3",{attrs:{id:"_2-1-node的waitstatus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-node的waitstatus"}},[a._v("#")]),a._v(" 2.1 Node的waitStatus")]),a._v(" "),t("p",[a._v("整个Node类的核心状态，有下面几个选项：")]),a._v(" "),t("ul",[t("li",[a._v("SIGNAL: -1 Node被激活，其后代已经或即将被block")]),a._v(" "),t("li",[a._v("CANCELLED: 1 Node被取消，可能的原因是超时或interrupt，注意这是唯一>0的状态，所以一般判断如果waitStatus>0则Node为Cancelled状态")]),a._v(" "),t("li",[a._v("CONDITION: -2 Node在Condition Queue里，除非被转移，不然不可以用作同步队列的No~de")]),a._v(" "),t("li",[a._v("PROPAGATE: -3 当前Node被releaseShared，且需要被扩散，只出现在head里")]),a._v(" "),t("li",[a._v("0: 初始状态")])]),a._v(" "),t("p",[a._v("整个设计的目标是可以通过符号来判断Node是否需要被SIGNAL，当为正时不需要。")]),a._v(" "),t("h2",{attrs:{id:"_3-aqs的waitqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-aqs的waitqueue"}},[a._v("#")]),a._v(" 3. AQS的waitQueue")]),a._v(" "),t("p",[a._v("AQS实例，内部存储一个双向队列，通过"),t("code",[a._v("head")]),a._v("和"),t("code",[a._v("tail")]),a._v("两个指针来存储队列的头和尾。")]),a._v(" "),t("p",[a._v("入队操作：通过CAS操作来set tail指针")]),a._v(" "),t("p",[a._v("unpark指定Node的后代：unpark指定的线程：先尝试入参节点的next指向的Node，如果为空或者已经Cancel，则从tail向前遍历到"),t("strong",[a._v("最前面")]),a._v("可以unpard的线程。")]),a._v(" "),t("p",[a._v("PS:为什么是向前追溯？Unpark只是保证调用的时间的状态中需要unpark的线程被唤起~，因为并发同时可能还有线程在入队，新入队线程会自动放到队列尾，导致状态变更，状态变更后，新入队的")])])}),[],!1,null,null,null);e.default=n.exports}}]);