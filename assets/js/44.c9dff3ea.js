(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{567:function(e,a,t){"use strict";t.r(a);var r=t(6),o=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"jdk源码-threadpoolexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk源码-threadpoolexecutor"}},[e._v("#")]),e._v(" JDK源码-ThreadPoolExecutor")]),e._v(" "),t("p",[e._v("JVM中的线程与JVM Thread对象，os_thread系统线程一一对应，由于线程本身的申请、销毁以及上下文切换比较耗费资源，因此需要合理的复用已创建的Thread对象，JDK原生提供了ThreadPoolExecutor类来提供池化线程对象的实现。")]),e._v(" "),t("h2",{attrs:{id:"基本数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据结构"}},[e._v("#")]),e._v(" 基本数据结构")]),e._v(" "),t("h2",{attrs:{id:"线程池的核心参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池的核心参数"}},[e._v("#")]),e._v(" 线程池的核心参数")]),e._v(" "),t("p",[e._v("coreSize: 核心线程数\nmaxSize: 最大线程数\nidleKeepTime: 超过核心线程数的线程，最大空闲存活时间\nQueue:\nRejectPolicy:默认是丢弃，还有CallerRun，抛异常，丢弃，丢弃Oldest\nThreadFactory:")]),e._v(" "),t("h2",{attrs:{id:"原生自带的几种线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原生自带的几种线程池"}},[e._v("#")]),e._v(" 原生自带的几种线程池")]),e._v(" "),t("ol",[t("li",[e._v("FixedThreadPool: core和maxSize固定，Queue为LinkedBlockingQueue且大小为Integer.maxValue，存活0S")]),e._v(" "),t("li",[e._v("CachedThreadPool: Queue为SyncronizedQueue，本身不存储Runnable,线程无限增长，线程会被复用，存活60s")]),e._v(" "),t("li",[e._v("ForkJoinPool: 特殊的线程池")]),e._v(" "),t("li",[e._v("SingleThreadPool: core和max为1，Queue为LinkedBlockingQueue且大小为Integer.maxValue")])]),e._v(" "),t("h2",{attrs:{id:"线程池提交task过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池提交task过程"}},[e._v("#")]),e._v(" 线程池提交Task过程")])])}),[],!1,null,null,null);a.default=o.exports}}]);